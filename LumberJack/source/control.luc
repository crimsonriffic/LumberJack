module control (
    // module includes the alu, asel, bsel and wdsel mux 
    input clk, // clock
    input rst, // reset 

    input left_button,
    input right_button,
    input reset_button,

    output data[16],

    output tree_seg1[2],
    output tree_seg2[2],
    output tree_seg3[2],
    output tree_seg4[2],
    output tree_seg5[2],
    output tree_seg6[2],
    output tree_seg7[2],
    output tree_seg8[2],

    output timer[6],
    output score[8],

    output test[5]


){
alu alunit;

.clk(clk) {
    edge_detector game_timer_detector(#RISE(1), #FALL(0));
    
    .rst(rst) {
        game_CU control_unit;
        regfile regs;
        random rng;

        counter slow_timer(#SIZE(1), #DIV(25));
    }
}

always {
    test = control_unit.test;

    // edge detectors
    game_timer_detector.in = slow_timer.value;

    // pass timer signal to CU unit
    control_unit.decrease_timer = game_timer_detector.out;

    // pass button press signals to CU unit
    control_unit.left_button = left_button;
    control_unit.right_button = right_button;
    control_unit.reset_button = reset_button;

    // set up regfile unit
    regs.we = control_unit.we_regfile;
    regs.rc = control_unit.regfile_write_address;
    regs.ra = control_unit.regfile_read_address_a;
    regs.rb = control_unit.regfile_read_address_b;

    // bootstrap rb to CU
    control_unit.regfile_datain = regs.rb_data[15];

    // send random value to CU
    control_unit.random = rng.out;

    // tree segment outputs
    tree_seg1 = regs.tree_seg1;
    tree_seg2 = regs.tree_seg2;
    tree_seg3 = regs.tree_seg3;
    tree_seg4 = regs.tree_seg4;
    tree_seg5 = regs.tree_seg5;
    tree_seg6 = regs.tree_seg6;
    tree_seg7 = regs.tree_seg7;
    tree_seg8 = regs.tree_seg8;

    // timer and score outputs
    timer = regs.timer;
    score = regs.player_score;

    //ALU
    alunit.alufn = control_unit.alufn;
    regs.data = alunit.out;

    //asel mux 
    case(control_unit.asel){
        b00 : alunit.a = control_unit.regfile_read_address_a;
        b01 : alunit.a = 0;
        b10 : alunit.a = 1;
        b11 : alunit.a = 60;
        default : alunit.a = control_unit.regfile_read_address_a;
    }
    //bsel mux 
    case(control_unit.bsel){
        b00: alunit.b = control_unit.regfile_read_address_b;
        b01: alunit.b = 0;
        b10: alunit.b = 1;
        b11: alunit.b = 2;
        default: alunit.b = control_unit.regfile_read_address_b;
    }

    //wdsel mux 
    case(control_unit.wdsel){
        b00: data = alunit.out;
        b01: data = 0 ;
        b10: data = b1111111111111111;
        default: data = alunit.out;
    }

}

}