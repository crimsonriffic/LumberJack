module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    input left_button[1],   // left button
    input right_button[1],  // right button 
    input start_button [1], // start/reset game
    
    output matrixout[3],    // 0:clk, 1:cs, 2:din
    output three_digit_seg[7],  // A-G
    output three_digit_sel[3],
    output four_digit_seg [7],  // A-G
    output four_digit_sel[4],   // 0:right digit --> 3:left digit 
    //output io_led[3][8],         // 8 user controllable LEDs

    input usb_rx,           // USB->Serial input
    output usb_tx         // USB->Serial output

    
  ) {
  
  sig rst;                  // reset signal
  
  bin_to_dec two_dec;
  bin_to_dec four_dec;

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    button_conditioner leftbuttonpress;
    button_conditioner rightbuttonpress;
    button_conditioner resetbuttonpress;
    edge_detector buttondetectorleft(#RISE(1), #FALL(0)); //detect on rising edge only
    edge_detector buttondetectorright(#RISE(1), #FALL(0)); //detect on rising edge only
    edge_detector buttondetectorreset(#RISE(1), #FALL(0)); //detect on rising edge only
    reset_conditioner reset_cond;
    matrix screen;
    control controller;
    .rst(rst){
//      alu_tester t;
      multi_seven_seg two_seg;
      multi_seven_seg four_seg;
    }

 
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // loop serial port
//    led = 8h00;             // turn LEDs off
    //io_led = 3x{{8h00}};    // turn LEDs off
    three_digit_seg = 8hff;          // turn segments off
    four_digit_seg = 8hff;
    three_digit_sel = 4hf;           // select no digits
    four_digit_sel = 4hf;

    matrixout = 8h00;
    matrixout[2] = screen.din; // A45 
    matrixout[1] = screen.cs; // A46
    matrixout[0] = screen.outclk; // A6

    // Button Presses
    leftbuttonpress.in = left_button; // Left Button
    buttondetectorleft.in = leftbuttonpress.out;
    
    rightbuttonpress.in = right_button; // Right Button
    buttondetectorright.in = rightbuttonpress.out;
    
    resetbuttonpress.in = start_button; // Reset Button
    buttondetectorreset.in = resetbuttonpress.out;

    // send tree segments data to screen
    screen.tree_seg1 = controller.tree_seg1;
    screen.tree_seg2 = controller.tree_seg2;
    screen.tree_seg3 = controller.tree_seg3;
    screen.tree_seg4 = controller.tree_seg4;
    screen.tree_seg5 = controller.tree_seg5;
    screen.tree_seg6 = controller.tree_seg6;
    screen.tree_seg7 = controller.tree_seg7;
    screen.tree_seg8 = controller.tree_seg8;

    // control
    controller.left_button = buttondetectorleft.out;
    controller.right_button = buttondetectorright.out;
    controller.reset_button = buttondetectorreset.out;

    // seven segment display (modify outputs in the other files if needed)
    two_dec.value = controller.timer;
    four_dec.value = controller.score;

    two_seg.values = two_dec.digits;
    four_seg.values = four_dec.digits;
  
    three_digit_seg = two_seg.seg; // connect segments to driver for 3 digits
    three_digit_sel = two_seg.sel; // connect digit select to driver for 3 digits
    
    four_digit_seg = four_seg.seg; // connect segments to driver for 4 digits
    four_digit_sel = four_seg.sel; // connect digit select to driver for 4 digits

    // send reset value to control
    controller.rst = rst;
    //io_led[2] = controller.test; 
    
    // alu_tester 
//    t.io_in = io_dip;                // for manual input
//    t.modeToggle = io_dip[0][7];     // to toggle mode (manual/auto) 
//    t.inv = io_dip[2][7];            // inverter to test error case for auto 
//    t.customin = customin;           // external dipswitches 
//    io_led[2] = t.out[23:16];        // output of zvn (manual) or correct/wrong (auto)
//    io_led[1] = t.out[15:8];         // 8 bits of output value 
//    io_led[0] = t.out[7:0];          // 8 bits of output value 
  }

  }