module game_CU (
    input clk,  // clock
    input rst,  // reset
    
    input decrease_timer,
    input regfile_datain[1],
    input random,

    input left_button,
    input right_button,
    input reset_button,
    
    output alufn[6],
    output asel[2],
    output bsel[2],
    output wdsel[2],
    output regfile_write_address[4],
    output regfile_read_address_a[4],
    output regfile_read_address_b[4],
    output we_regfile,
    output test[3]

    // consider adding a debugging signal
  ) {

  .clk(clk) {
    fsm game_fsm = {
        START_SET_TIMER,
        RESET_SCORE,
        INITIALISE_SEGMENT_1,
        INITIALISE_SEGMENT_2,
        INITIALISE_SEGMENT_3,
        INITIALISE_SEGMENT_4,
        INITIALISE_SEGMENT_5,
        INITIALISE_SEGMENT_6,
        INITIALISE_SEGMENT_7,
        INITIALISE_SEGMENT_8,
        IDLE,
        CHOP_LEFT_TRUNK,
        CHOP_RIGHT_TRUNK,
        BRANCH_CHOP_LEFT,
        BRANCH_CHOP_RIGHT,
        CHECK_HIT_BRANCH,
        BRANCH_HIT_BRANCH,
        INCREASE_PLAYER_SCORE,
        UPDATE_SEGMENT_1,
        UPDATE_SEGMENT_2,
        UPDATE_SEGMENT_3,
        UPDATE_SEGMENT_4,
        UPDATE_SEGMENT_5,
        UPDATE_SEGMENT_6,
        UPDATE_SEGMENT_7,
        UPDATE_SEGMENT_8,
        CHECK_GAME_TIMER_GREATER_THAN_ZERO,
        BRANCH_GAME_TIMER,
        DECREASE_GAME_TIMER,
        PLAYER_WINS,
        PLAYER_LOSE,
        GAMEOVER
    };
  }

  always {
    // standard settings
    alufn = 0;
    asel = 0;
    bsel = 0;
    we_regfile = 0;
    regfile_write_address = 1111;
    regfile_read_address_a = 0000;
    regfile_read_address_b = 0000;
    wdsel = 0;
    test = b010;

    if (reset_button) {
      game_fsm.d = game_fsm.START_SET_TIMER;
    }
    else {
      case(game_fsm.q) {
        game_fsm.START_SET_TIMER:
          alufn = b000000; // ADD
          asel = b11;
          bsel = b01;
          we_regfile = 1;
          regfile_write_address = b0001;
          game_fsm.d = game_fsm.RESET_SCORE;
          test = b000;
        
        game_fsm.RESET_SCORE:
          alufn = b000000; // ADD
          asel = b01;
          bsel = b01;
          we_regfile = 1;
          regfile_write_address = b0000;
          game_fsm.d = game_fsm.INITIALISE_SEGMENT_1;
          test = b001;


        // -------------------- INITIALISE TREE --------------------
        game_fsm.INITIALISE_SEGMENT_1:
          alufn = b000000; // ADD
          asel = b01;
          if (random == b00) {
            bsel = b01;
          }
          else if (random == b01) {
            bsel = b10;
          }
          else if (random == b10) {
            bsel = b11;
          }
          we_regfile = 1;
          regfile_write_address = b0011;
          game_fsm.d = game_fsm.INITIALISE_SEGMENT_2;
          test = b010;
        
        game_fsm.INITIALISE_SEGMENT_2:
          alufn = b000000; // ADD
          asel = b01;
          if (random == b00) {
            bsel = b01;
          }
          else if (random == b01) {
            bsel = b10;
          }
          else if (random == b10) {
            bsel = b11;
          }
          we_regfile = 1;
          regfile_write_address = b0100;
          game_fsm.d = game_fsm.INITIALISE_SEGMENT_3;
          //test = b011;
        
        game_fsm.INITIALISE_SEGMENT_3:
          alufn = b000000; // ADD
          asel = b01;
          if (random == b00) {
            bsel = b01;
          }
          else if (random == b01) {
            bsel = b10;
          }
          else if (random == b10) {
            bsel = b11;
          }
          we_regfile = 1;
          regfile_write_address = b0101;
          game_fsm.d = game_fsm.INITIALISE_SEGMENT_4;
          //test = b100;
        
        game_fsm.INITIALISE_SEGMENT_4:
          alufn = b000000; // ADD
          asel = b01;
          if (random == b00) {
            bsel = b01;
          }
          else if (random == b01) {
            bsel = b10;
          }
          else if (random == b10) {
            bsel = b11;
          }
          we_regfile = 1;
          regfile_write_address = b0110;
          game_fsm.d = game_fsm.INITIALISE_SEGMENT_5;
          //test = b101;
        
        game_fsm.INITIALISE_SEGMENT_5:
          alufn = b000000; // ADD
          asel = b01;
          if (random == b00) {
            bsel = b01;
          }
          else if (random == b01) {
            bsel = b10;
          }
          else if (random == b10) {
            bsel = b11;
          }
          we_regfile = 1;
          regfile_write_address = b0111;
          game_fsm.d = game_fsm.INITIALISE_SEGMENT_6;
          //test = b110;
        
        game_fsm.INITIALISE_SEGMENT_6:
          alufn = b000000; // ADD
          asel = b01;
          if (random == b00) {
            bsel = b01;
          }
          else if (random == b01) {
            bsel = b10;
          }
          else if (random == b10) {
            bsel = b11;
          }
          we_regfile = 1;
          regfile_write_address = b1000;
          game_fsm.d = game_fsm.INITIALISE_SEGMENT_7;
          //test = b111;
        
        game_fsm.INITIALISE_SEGMENT_7:
          alufn = b000000; // ADD
          asel = b01;
          if (random == b00) {
            bsel = b01;
          }
          else if (random == b01) {
            bsel = b10;
          }
          else if (random == b10) {
            bsel = b11;
          }
          we_regfile = 1;
          regfile_write_address = b1001;
          game_fsm.d = game_fsm.INITIALISE_SEGMENT_8;
          //test = b01000;
        
        game_fsm.INITIALISE_SEGMENT_8:
          alufn = b000000; // ADD
          asel = b01;
          if (random == b00) {
            bsel = b01;
          }
          else if (random == b01) {
            bsel = b10;
          }
          else if (random == b10) {
            bsel = b11;
          }
          we_regfile = 1;
          regfile_write_address = b1010;
          game_fsm.d = game_fsm.IDLE;
          //test = b01001;
        // -------------------- END OF INITIALISATION --------------------
        

        // TODO: check whether timer will decrease even if button is not pressed
        // should still work, decrease_timer relies on some input to control unit, slow timer?
        // in Prof Nat's game_miniBeta, she created a game_CU in line 30, and in line 46, her decrease_timer input is 1 when game_timer_detector.out is 1 (game_timer_detector is an edge_detector component)
        game_fsm.IDLE:
           if (decrease_timer) {
          game_fsm.d = game_fsm.CHECK_GAME_TIMER_GREATER_THAN_ZERO;
          }
          if (left_button) {
            game_fsm.d = game_fsm.CHOP_LEFT_TRUNK;
          }
          if (right_button) {
            game_fsm.d = game_fsm.CHOP_RIGHT_TRUNK;
          }
            
          test = b011;
        
        game_fsm.CHOP_LEFT_TRUNK:
          alufn = b000000; // ADD
          asel = b01;
          bsel = b10;
          we_regfile = 1;
          regfile_write_address = b0010;
          wdsel = b00;
          game_fsm.d = game_fsm.BRANCH_CHOP_LEFT;
          //test = b01011;
        
        game_fsm.CHOP_RIGHT_TRUNK:
          alufn = b000000; // ADD
          asel = b01;
          bsel = b11;
          we_regfile = 1;
          regfile_write_address = b0010;
          wdsel = b00;
          game_fsm.d = game_fsm.BRANCH_CHOP_RIGHT;
          //test = b01100;
        
        game_fsm.BRANCH_CHOP_LEFT:
          regfile_read_address_b = b0010;
          game_fsm.d = game_fsm.CHECK_HIT_BRANCH;
          //test = b01101;
        
        game_fsm.BRANCH_CHOP_RIGHT:
          regfile_read_address_b = b0010;
          game_fsm.d = game_fsm.CHECK_HIT_BRANCH;
          //test = b01110;
        
        game_fsm.CHECK_HIT_BRANCH:
          alufn = b110011; // CMPEQ
          we_regfile = 1;
          regfile_read_address_a = b0010;
          regfile_read_address_b = b0011;
          regfile_write_address = b1111;
          game_fsm.d = game_fsm.BRANCH_HIT_BRANCH;
          //test = b01111;
        
        game_fsm.BRANCH_HIT_BRANCH:
          regfile_read_address_b = b1111;
          if (regfile_datain) {
            game_fsm.d = game_fsm.PLAYER_LOSE;
          }
          else {
            game_fsm.d = game_fsm.INCREASE_PLAYER_SCORE;
          }
          //test = b10000;
        
        game_fsm.INCREASE_PLAYER_SCORE:
          alufn = b000000; // ADD
          asel = b10;
          we_regfile = 1;
          regfile_read_address_b = b0000;
          regfile_write_address = b0000;
          // game_fsm.d = game_fsm.UPDATE_TREE;
          game_fsm.d = game_fsm.UPDATE_SEGMENT_1;
          //test = b10001;
        

        // -------------------- UPDATE TREE --------------------
        game_fsm.UPDATE_SEGMENT_1:
          alufn = b000000; // ADD
          asel = b01;
          bsel = b00;
          we_regfile = 1;
          regfile_read_address_b = b0100;
          regfile_write_address = b0011;
          game_fsm.d = game_fsm.UPDATE_SEGMENT_2;
          //test = b10010;
        
        game_fsm.UPDATE_SEGMENT_2:
          alufn = b000000; // ADD
          asel = b01;
          bsel = b00;
          we_regfile = 1;
          regfile_read_address_b = b0101;
          regfile_write_address = b0100;
          game_fsm.d = game_fsm.UPDATE_SEGMENT_3;
          //test = b10011;
        
        game_fsm.UPDATE_SEGMENT_3:
          alufn = b000000; // ADD
          asel = b01;
          bsel = b00;
          we_regfile = 1;
          regfile_read_address_b = b0110;
          regfile_write_address = b0101;
          game_fsm.d = game_fsm.UPDATE_SEGMENT_4;
          //test = b10100;
        
        game_fsm.UPDATE_SEGMENT_4:
          alufn = b000000; // ADD
          asel = b01;
          bsel = b00;
          we_regfile = 1;
          regfile_read_address_b = b0111;
          regfile_write_address = b0110;
          game_fsm.d = game_fsm.UPDATE_SEGMENT_5;
          //test = b10101;
        
        game_fsm.UPDATE_SEGMENT_5: 
          alufn = b000000; // ADD
          asel = b01;
          bsel = b00;
          we_regfile = 1;
          regfile_read_address_b = b1000;
          regfile_write_address = b0111;
          game_fsm.d = game_fsm.UPDATE_SEGMENT_6;
          //test = b10110;
        
        game_fsm.UPDATE_SEGMENT_6:
          alufn = b000000; // ADD
          asel = b01;
          bsel = b00;
          we_regfile = 1;
          regfile_read_address_b = b1001;
          regfile_write_address = b1000;
          game_fsm.d = game_fsm.UPDATE_SEGMENT_7;
          //test = b10111;
        
        game_fsm.UPDATE_SEGMENT_7:
          alufn = b000000; // ADD
          asel = b01;
          bsel = b00;
          we_regfile = 1;
          regfile_read_address_b = b1010;
          regfile_write_address = b1001;
          game_fsm.d = game_fsm.UPDATE_SEGMENT_8;
          //test = b11000;
        
        game_fsm.UPDATE_SEGMENT_8:
          alufn = b000000; // ADD
          asel = b01;
          if (random == b00) {
            bsel = b01;
          }
          else if (random == b01) {
            bsel = b10;
          }
          else if (random == b10) {
            bsel = b11;
          }
          we_regfile = 1;
          regfile_write_address = b1010;
          game_fsm.d = game_fsm.IDLE;
          //test = b11001;
        // -------------------- END OF UPDATE --------------------
        
        
        game_fsm.CHECK_GAME_TIMER_GREATER_THAN_ZERO:
          alufn = b110101; // CMPLT
          asel = b01;
          we_regfile = 1;
          regfile_read_address_b = b0001;
          regfile_write_address = b1110;
          game_fsm.d = game_fsm.BRANCH_GAME_TIMER;
          //test = b11010;
        
        game_fsm.BRANCH_GAME_TIMER:
          regfile_read_address_b = b1110;
          if (regfile_datain) {
            game_fsm.d = game_fsm.DECREASE_GAME_TIMER;
          }
          else {
            game_fsm.d = game_fsm.PLAYER_WINS;
          }
          //test = b11011;
        
        game_fsm.DECREASE_GAME_TIMER:
          alufn = b000001; // SUB
          bsel = b10;
          we_regfile = 1;
          regfile_read_address_a = b0001;
          regfile_write_address = b0001;
          game_fsm.d = game_fsm.IDLE;
          //test = b11100;
        
        game_fsm.PLAYER_WINS:
          we_regfile = 1;
          regfile_write_address = b0000;
          wdsel = b10;
          game_fsm.d = game_fsm.GAMEOVER;
          //test = b11101;
        
        game_fsm.PLAYER_LOSE:
          we_regfile = 1;
          regfile_write_address = b0000;
          wdsel = b01;
          game_fsm.d = game_fsm.GAMEOVER;
          //test = b11110;
        
        game_fsm.GAMEOVER:
          if (rst) {
            game_fsm.d = game_fsm.START_SET_TIMER;
          }
          else {
            game_fsm.d = game_fsm.GAMEOVER;
          }
          //test = b11111;
      }
    }
  }
}
